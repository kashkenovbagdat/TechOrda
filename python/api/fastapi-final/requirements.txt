HEAD
apturl==0.5.2
attrs==21.2.0
bcrypt==3.2.0
blinker==1.4
Brlapi==0.8.3
certifi==2020.6.20
chardet==4.0.0
click==8.0.3
colorama==0.4.4
command-not-found==0.3
cryptography==3.4.8
cupshelpers==1.0
dbus-python==1.2.18
defer==1.0.6
distro==1.7.0
distro-info==1.1+ubuntu0.2
docker==5.0.3
docker-compose==1.29.2
dockerpty==0.4.1
docopt==0.6.2
duplicity==0.8.21
fasteners==0.14.1
future==0.18.2
httplib2==0.20.2
idna==3.3
importlib-metadata==4.6.4
jeepney==0.7.1
jsonschema==3.2.0
keyring==23.5.0
language-selector==0.1
launchpadlib==1.10.16
lazr.restfulclient==0.14.4
lazr.uri==1.0.6
lockfile==0.12.2
louis==3.20.0
macaroonbakery==1.3.1
Mako==1.1.3
MarkupSafe==2.0.1
monotonic==1.6
more-itertools==8.10.0
netifaces==0.11.0
oauthlib==3.2.0
olefile==0.46
paramiko==2.9.3
pexpect==4.8.0
Pillow==9.0.1
protobuf==3.12.4
ptyprocess==0.7.0
pycairo==1.20.1
pycups==2.0.1
PyGObject==3.42.1
PyJWT==2.3.0
pymacaroons==0.13.0
PyNaCl==1.5.0
pyparsing==2.4.7
pyRFC3339==1.1
pyrsistent==0.18.1
python-apt==2.4.0+ubuntu4
python-dateutil==2.8.1
python-debian==0.1.43+ubuntu1.1
python-dotenv==0.19.2
pytz==2022.1
pyxdg==0.27
PyYAML==5.4.1
reportlab==3.6.8
requests==2.25.1
screen-resolution-extra==0.0.0
SecretStorage==3.3.1
six==1.16.0
systemd-python==234
texttable==1.6.4
ubuntu-drivers-common==0.0.0
ubuntu-pro-client==8001
ufw==0.36.1
unattended-upgrades==0.1
urllib3==1.26.5
usb-creator==0.3.7
wadllib==1.3.6
websocket-client==1.2.3
xdg==5
xkit==0.0.0
zipp==1.0.0
=======
﻿annotated-types==0.7.0
anyio==4.6.0
click==8.1.7
colorama==0.4.6
fastapi==0.115.0
h11==0.14.0
idna==3.10
pydantic==2.9.2
pydantic_core==2.23.4
sniffio==1.3.1
starlette==0.38.6
typing_extensions==4.12.2
uvicorn==0.31.1



from fastapi import FastAPI
from typing import Dict

app = FastAPI()

@app.get("/sum1n/{n}")
def sum_1_to_n(n: int) -> Dict[str, int]:
    result = sum(range(1, n + 1))
    return {"result": result}
#////////////////////////////////////////////////////////////
from fastapi import FastAPI
from typing import Optional

app = FastAPI()

@app.get("/fibo")
def get_fibonacci(n: Optional[int] = 1):
    if n <=0:
        return {"result": None}
    
    a, b = 0, 1
    for _ in range(n - 1):
        a, b = b, a + b
    
    return {"result": a}
#////////////////////////////////////////////////////////////
from fastapi import FastAPI, Header
from fastapi.responses import JSONResponse

app = FastAPI()

@app.post("/reverse")
def reverse_string(string: str = Header(...)):

    reverse_string = string[::-1]
    return JSONResponse(content={"result": reverse_string})
#////////////////////////////////////////////////////////////
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Глобальный массив для сохранения элементов
elements = []

# Модель для запроса
class Element(BaseModel):
    element: str

@app.put("/list")
def add_element(item: Element):
    elements.append(item.element)  # Добавляем только строку из объекта Element
    return {"result": elements}

@app.get("/list")
def get_elements():
    return {"result": elements}
#
from fastapi import FastAPI
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()
#Глобальный массив для храния элементов
elements = []

# модель данных для запросов
class Element(BaseModel):
    element: str #Поле для добавления элемента

#Эндпоин для добавления элемента в массив
@app.put("/list")
def add_element(item: Element):
    elements.append(item.element) #добавление элемента в глобальный массивы
    return JSONResponse(content={"return": elements})


# Эндпоинт для получения всех элементов из массива
@app.get("/list")
def get_elements():
    return JSONResponse(content={"result": elements})


#////////////////////////////////////////////////////////////

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import operator

app = FastAPI()

# Модель данных для запросов
class Expression(BaseModel):
    expr: str # Строка, содержащая математическое выражение

#Эндпоинт для вычисления математического выражения

@app.post("/calculator")
def calculator(expression: Expression):

    try:
        #
        num1, op, num2 = expression.expr.split(',')
        num1 = float(num1) #
        num2 = float(num2) #

        #
        operations = {
            '+': operator.add,
            '-': operator.sub,
            '*': operator.mul,
            '/': operator.truediv
        }
        if op not in operations:
            #
            raise HTTPException(status_code=403, detail={"error": "zerodiv"})
        #
        result = operations[op](num1, num2)
        return JSONResponse(content={"result": result})
    
    except ValueError:
    #
         raise HTTPException(status_code=400, detail={"error": "ivalid"})
    except Exception as e:
        #
        raise HTTPException(status_code=500, detail={"error": str(e)})

>>>>>>> 2805c6035fb746a2820982fd9834e9f9507d8605
